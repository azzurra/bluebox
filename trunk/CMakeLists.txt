
PROJECT(bluebox)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

INCLUDE(CheckIncludeFile)
INCLUDE(CheckFunctionExists)
INCLUDE(FindOpenSSL)
INCLUDE(FindCrypto)

CHECK_INCLUDE_FILE(sys/resource.h HAVE_SYS_RESOURCE_H)

CHECK_INCLUDE_FILE(sys/dir.h HAVE_SYS_DIR_H)
CHECK_INCLUDE_FILE(sys/ndir.h HAVE_SYS_NDIR_H)
CHECK_INCLUDE_FILE(sys/param.h HAVE_SYS_PARAM_H)
CHECK_INCLUDE_FILE(sys/socket.h HAVE_SYS_SOCKET_H)
CHECK_INCLUDE_FILE(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILE(sys/wait.h HAVE_SYS_WAIT_H)
CHECK_INCLUDE_FILE(alloca.h HAVE_ALLOCA_H)
CHECK_INCLUDE_FILE(arpa/inet.h HAVE_ARPA_INET_H)
CHECK_INCLUDE_FILE(dirent.h HAVE_DIRENT_H)
CHECK_INCLUDE_FILE(dlfcn.h HAVE_DLFCN_H)
CHECK_INCLUDE_FILE(errno.h HAVE_ERRNO_H)
CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H)
CHECK_INCLUDE_FILE(ndir.h HAVE_NDIR_H)
CHECK_INCLUDE_FILE(netinet/in.h HAVE_NETINET_IN_H)
CHECK_INCLUDE_FILE(stddef.h HAVE_STDDEF_H)
CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILE(strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)

CHECK_FUNCTION_EXISTS(snprintf HAVE_SNPRINTF)

SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")

IF (APPLE)
  # rpath handling on OSX
  SET(CMAKE_INSTALL_NAME_DIR ${CMAKE_INSTALL_RPATH})
  SET(SHLIBEXT ".dylib")
  SET(IRCD_PREFIX "${CMAKE_INSTALL_PREFIX}")
ELSEIF (UNIX)
  SET(SHLIBEXT ".so")
  SET(IRCD_PREFIX "${CMAKE_INSTALL_PREFIX}")
ENDIF (APPLE)

SET(CMAKE_BUILD_TYPE "Debug")
#SET(CMAKE_BUILD_TYPE "Release")

if(COMMAND cmake_policy)
  cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)

IF (OPENSSL_FOUND)
  SET(USE_CHALLENGE 1)
ENDIF (OPENSSL_FOUND)

CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/include/setup.h.cmake ${PROJECT_BINARY_DIR}/setup.h)
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/doc/example.conf.cmake ${PROJECT_BINARY_DIR}/doc/example.conf @ONLY)

ADD_SUBDIRECTORY(libratbox)
ADD_SUBDIRECTORY(libratboxcore)
ADD_SUBDIRECTORY(resolver)
ADD_SUBDIRECTORY(modules)
ADD_SUBDIRECTORY(contrib)
ADD_SUBDIRECTORY(ssld)
ADD_SUBDIRECTORY(bandb)

ADD_EXECUTABLE(ircd main.c)

TARGET_LINK_LIBRARIES(ircd ratbox ratboxcore)

ADD_CUSTOM_TARGET(bluebox ALL)
ADD_DEPENDENCIES(bluebox libratbox libratboxcore resolver modules contrib ssld bandb)

# Workaround for ircd.motd
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/cmake/InstallMotd.cmake.in ${PROJECT_BINARY_DIR}/InstallMotd.cmake @ONLY)

INSTALL(TARGETS ircd DESTINATION bin)
INSTALL(FILES ${PROJECT_BINARY_DIR}/doc/example.conf DESTINATION ${CMAKE_INSTALL_PREFIX}/etc/bluebox)
#INSTALL(FILES doc/ircd.motd DESTINATION ${CMAKE_INSTALL_PREFIX}/etc/bluebox)
INSTALL(SCRIPT ${PROJECT_BINARY_DIR}/InstallMotd.cmake)
INSTALL(DIRECTORY help DESTINATION ${CMAKE_INSTALL_PREFIX}/etc/bluebox)
INSTALL(CODE "FILE(MAKE_DIRECTORY \${ENV}\${CMAKE_INSTALL_PREFIX}/var/log/bluebox)")
